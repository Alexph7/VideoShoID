import os
import sys
import logging
import telegram
from telegram import Update, constants
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)

print("¬ª python-telegram-bot version:", telegram.__version__)

# Configura logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("Vari√°vel de ambiente TELEGRAM_BOT_TOKEN n√£o encontrada.")
    sys.exit(1)


# Fun√ß√£o que roda depois que o bot conecta, para ajustar a descri√ß√£o
async def setup_bot_description(app):
    # descri√ß√£o curta (topo da conversa)
    await app.bot.set_my_short_description(
        short_description=(
            "ü§ñ Ol√°! Sou o bot do @cupomnavitrine ‚Äì "
            "envie um ID e eu busco o v√≠deo pra voc√™."
        ),
        language_code="pt"
    )
    # descri√ß√£o longa (na p√°gina do bot)
    await app.bot.set_my_description(
        description=(
            "ü§ñ Ol√°! Sou o bot do @cupomnavitrine ‚Äì "
            "vou te ajudar a buscar v√≠deos da shopee pra voc√™ por IDs. "
            "Se n√£o existir ainda, coloco na fila e aviso quando estiver dispon√≠vel. üëå"
        ),
        language_code="pt"
    )
    logger.info("Descri√ß√µes do bot definidas com sucesso.")

# Handler para /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîé Digite o ID do produto no formato ABC-12G-DX3 ou use /buscar para procurar por nome."
    )

def main():
    # Aqui constru√≠mos o app **uma √∫nica vez**, incluindo o post_init:
    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .post_init(setup_bot_description)  # define as descri√ß√µes ao subir
        .build()
    )

    # Registra o handler de /start
    app.add_handler(CommandHandler('start', start))

    # Inicia o polling
    app.run_polling()

if __name__ == '__main__':
    main()
