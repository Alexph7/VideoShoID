import os
import sys
import logging
from telegram import Update, constants
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
)
import telegram
print("Â» python-telegram-bot version:", telegram.__version__)

# Configura logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("VariÃ¡vel de ambiente TELEGRAM_BOT_TOKEN nÃ£o encontrada.")
    sys.exit(1)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # sÃ³ o /start mesmo
    await update.message.reply_text(
        "ðŸ”Ž Digite o ID do produto no formato ABC-12G-DX3 ou use /buscar para procurar por nome."
    )


# FunÃ§Ã£o que roda depois que o bot conecta, para ajustar a descriÃ§Ã£o
async def setup_bot_description(app):
    # descriÃ§Ã£o curta (topo da conversa)
    await app.bot.set_my_short_description(
        short_description=(
            "ðŸ¤– OlÃ¡! Sou o bot do @cupomnavitrine â€“ "
            "envie um ID e eu busco o vÃ­deo pra vocÃª."
        ),
        language_code="pt"
    )
    # descriÃ§Ã£o longa (na pÃ¡gina do bot)
    await app.bot.set_my_description(
        description=(
            "ðŸ¤– OlÃ¡! Sou o bot do @cupomnavitrine â€“ "
            "vou te ajudar a buscar vÃ­deos da shopee pra vocÃª por IDs. "
            "Se nÃ£o existir ainda, coloco na fila e aviso quando estiver disponÃ­vel. ðŸ‘Œ"
        ),
        language_code="pt"
    )


def main():
    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .post_init(setup_bot_description)  # chama ao subir
        .build()
    )

    app.add_handler(CommandHandler('start', start))
    app.run_polling()

if __name__ == '__main__':
    main()
